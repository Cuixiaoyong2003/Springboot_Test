<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        classpath:/org/springframework/beans/factory/xml/spring-beans-4.3.xsd    
                        http://www.springframework.org/schema/context    
                        classpath:/org/springframework/context/config/spring-context-4.3.xsd    
                        http://www.springframework.org/schema/mvc    
                        classpath:/org/springframework/web/servlet/config/spring-mvc-4.3.xsd">

	<!-- 以下代码加入为临时测试用[并入SpringMVC后需删除] -->
	<!-- 引入jdbc配置文件 -->
	<!-- <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="location" value="classpath:jdbc.properties" /> <property 
		name="location" value="classpath:jdbc.properties" /> </bean> -->
	<!-- 以上代码加入为临时测试用 -->

	<!-- 阿里巴巴druid配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />

		<!-- 初始化大小、最小、最大 -->
		<property name="initialSize" value="${initialSize}" />
		<property name="minIdle" value="${minIdle}" />
		<property name="maxActive" value="${maxActive}" />

		<!-- 配置连接等待超时时间 -->
		<property name="maxWait" value="${maxWait}" />

		<!-- 配置检测，关闭不使用连接 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置连接池中连接生存的时间(最小) -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- 连接是否失效 -->
		<property name="testWhileIdle" value="true" />
		<!-- 这里建议配置为TRUE，防止取到的连接不可用，生产环境testOnBorrow，testOnReturn都关闭 -->
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
		<property name="validationQuery" value="select 1 " />
		<!-- 监控统计用的filter:stat ,日志用的filter:log4j ,防御sql注入的filter:wall -->
		<property name="filters" value="wall" />
		<!-- 如果同时配置了filters和proxyFilters， 是组合关系，并非替换关系,所以可以选择是否配置 -->
		<!-- <property name="proxyFilters"><list><ref bean="logFilter" /></list></property> -->
	</bean>

	<!-- 完美整合spring和MyBatis，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 配置数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- mybatis全局文件 -->
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<!-- 自动扫描实体类包文件，需配置别名包扫描 -->
		<property name="typeAliasesPackage" value="com.ls.cxy.pojo"></property>
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/ls/cxy/mapping/*.xml"></property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ls.cxy.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- (事务管理)transaction manager -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

</beans>